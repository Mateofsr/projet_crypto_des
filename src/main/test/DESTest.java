package main.test;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;

import main.chiffrement.DES;

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class DESTest {

	private DES des;
	private final String UTF_8 = "UTF-8";
	
	@BeforeAll
	void setUp() {
		des = new DES();
		des.setEncodage(UTF_8);
	}
	
	@Test
	void testStringToBits() {
		// GIVEN a plain text
		String message = "Hello world!";
		int[] expectedResult = {0,1,0,0,1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,0,1,1,0,
				0,0,1,1,0,1,1,0,0,0,1,1,0,1,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,0,1,
				1,1,0,1,1,0,1,1,1,1,0,1,1,1,0,0,1,0,0,1,1,0,1,1,0,0,0,1,1,0,0,
				1,0,0,0,0,1,0,0,0,0,1};
		// WHEN the string is converted to bits in UTF-8
		// THEN
		assertArrayEquals(expectedResult, des.stringToBits(message));
	}
	
	@Test
	void testBitsToString() {
		// GIVEN a list of bits
		String expectedMessage = "Hello world!";
		int[] bytes = {0,1,0,0,1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,0,1,1,0,
				0,0,1,1,0,1,1,0,0,0,1,1,0,1,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,0,1,
				1,1,0,1,1,0,1,1,1,1,0,1,1,1,0,0,1,0,0,1,1,0,1,1,0,0,0,1,1,0,0,
				1,0,0,0,0,1,0,0,0,0,1};
		// WHEN the list is converted to a string
		// THEN
		assertEquals(expectedMessage, des.bitsToString(bytes));
	}
	
	@Test
	void testDecoupage() {
		// GIVEN bloc of bits
		int[] bytes = {0,1,0,0,1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,0,1,1,0,
				0,0,1,1,0,1,1,0,0,0,1,1,0,1,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,0,1,
				1,1,0,1,1,0,1,1,1,1,0,1,1,1,0,0,1,0,0,1,1,0,1,1,0,0,0,1,1,0,0,
				1,0,0,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,0,1,1,0,
				0,0,1,1,0,1,1,0,0,0,1,1,0,1,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,0,1,
				1,1,0,1,1,0,1,1,1,1,0,1,1,1,0,0,1,0,0,1,1,0,1,1,0,0,0,1,1,0,0,
				1,0,0,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,0,1,1,0,
				0,0,1,1,0,1,1,0,0,0,1,1,0,1,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,0,1,
				1,1,0,1,1,0,1,1,1,1,0,1,1,1,0,0,1,0,0,1,1,0,1,1,0,0,0,1,1,0,0,
				1,0,0,0,0,1,0,0,0,0,1};
		int[][] expectedBlocs = {
				{0,1,0,0,1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,0,1,1,0,0,0,1,1,0,1,1,0,
				0,0,1,1,0,1,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,0,1,1,
				1,1},
				{0,1,1,1,0,0,1,0,0,1,1,0,1,1,0,0,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,
				1,0,1,0,0,1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,0,1,1,0,0,0,1,1,0,1,1,
				0,0},
				{0,1,1,0,1,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,0,1,1,1,
				1,0,1,1,1,0,0,1,0,0,1,1,0,1,1,0,0,0,1,1,0,0,1,0,0,0,0,1,0,0,0,
				0,1},
				{0,1,0,0,1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,0,1,1,0,0,0,1,1,0,1,1,0,
				0,0,1,1,0,1,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,0,1,1,
				1,1,},
				{0,1,1,1,0,0,1,0,0,1,1,0,1,1,0,0,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,
				1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0}};
		// WHEN the bloc is cut 64 by 64
		// THEN
		assertArrayEquals(expectedBlocs, des.decoupage(bytes, des.TAILLE_BLOC));
	
	
		// GIVEN a bloc of the same length of the bloc size to cut
		int[] bytes2 = {0,1,0,0,1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,0,1,1,0,0,0,1,1,0,1,1,0,
				0,0,1,1,0,1,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,0,1,1,
				1,1};
		int[][] expectedBlocs2 = {{0,1,0,0,1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,0,1,1,0,0,0,1,1,0,1,1,0,
				0,0,1,1,0,1,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,0,1,1,
				1,1}};
		// WHEN the bloc is cut
		// THEN 
		assertArrayEquals(expectedBlocs2, des.decoupage(bytes2, des.TAILLE_BLOC));
	}
	
	@Test
	void testPermutation() {
		// GIVEN a bloc of 64 elements
		// and a permutation table with a length of 64
		int[] bloc = {0,1,0,0,1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,0,1,1,0,0,0,1,1,0,
				1,1,0,0,0,1,1,0,1,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,
				0,1,1,1,1};
		int[] expectedPermutedBloc = {1,1,0,1,1,1,1,1,0,1,0,0,0,0,0,0,1,1,0,1,
				1,1,1,0,1,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,0,0,
				1,1,1,0,1,1,1,0,1,0,0,0,0};
		// WHEN the bloc is permuted by the permutation table
		// THEN
		assertArrayEquals(expectedPermutedBloc, des.permutation(des.PERM_INITIAL,bloc));
	}
	
	@Test
	void testSetMasterKey() {
		// GIVEN a DES
		// WHEN the master key is set
		des.setMasterKey();
		// THEN all the value of the master key are 0 or 1
		for (int value : des.getMasterKey()) {
			assertTrue(value == 0 | value == 1);
		}
		assertEquals(des.TAILLE_BLOC, des.getMasterKey().length);
	}
	
	@Test
	void testDecalleGauche() {
		// GIVEN a bloc of n integer
		int[] bloc = {0,1,0,0,1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,0,1,1,0,0,0,1,1,0,
				1,1,0,0,0,1,1,0,1,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,
				0,1,1,1,1};
		int shifter = 1;
		int [] expectedBloc = {1,0,0,1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,0,1,1,0,0,0,1,1,0,
				1,1,0,0,0,1,1,0,1,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,
				0,1,1,1,1,0};
		// WHEN we shift to the left the bloc
		// THEN
		assertArrayEquals(expectedBloc, des.decalleGauche(bloc,shifter));
		
		// GIVEN a bloc of a size < of the shifter
		int[] bloc2 = {0,1,0,0,1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,0,1,1,0,0,0,1,1,0,
				1,1,0,0,0,1,1,0,1,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,
				0,1,1,1,1};
		int shifter2 = 132;
		int [] expectedBloc2 = {1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,0,1,1,0,0,0,1,1,0,
				1,1,0,0,0,1,1,0,1,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,
				0,1,1,1,1,0,1,0,0};
		// WHEN we shift to the left the bloc
		// THEN
		assertArrayEquals(expectedBloc2, des.decalleGauche(bloc2,shifter2));
		
		// GIVEN a bloc of a size = of the shifter
		int[] bloc3 = {0,1,0,0,1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,0,1,1,0,0,0,1,1,0,
				1,1,0,0,0,1,1,0,1,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,
				0,1,1,1,1};
		int shifter3 = 64;
		int [] expectedBloc3 = {0,1,0,0,1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,0,1,1,0,
				0,0,1,1,0,1,1,0,0,0,1,1,0,1,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,0,1,
				1,1,0,1,1,0,1,1,1,1};
		// WHEN we shift to the left the bloc
		// THEN
		assertArrayEquals(expectedBloc3, des.decalleGauche(bloc3,shifter3));
	}
	
	@Test
	void testRecollageBloc() {
		// GIVEN a list of blocs
		int[][] blocs = {
				{0,1,0,0,1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,0,1,1,0,0,0,1,1,0,1,1,0,
				0,0,1,1,0,1,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,0,1,1,
				1,1},
				{0,1,1,1,0,0,1,0,0,1,1,0,1,1,0,0,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,
				1,0,1,0,0,1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,0,1,1,0,0,0,1,1,0,1,1,
				0,0}};
		int[] expectedBloc  = {0,1,0,0,1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,0,1,1,0,0,0,1,
				1,0,1,1,0,0,0,1,1,0,1,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,
				1,1,0,1,1,1,1,0,1,1,1,0,0,1,0,0,1,1,0,1,1,0,0,0,1,1,0,0,1,0,0,
				0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,0,1,1,0,
				0,0,1,1,0,1,1,0,0};
		// WHEN we stick the blocs to get just one
		// THEN
		assertArrayEquals(expectedBloc, des.recollageBloc(blocs));
		
		// GIVEN a list of blocs without the same size
		int[][] blocs2 = {
				{0,1,0,0,1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,0,1,1,0,0,0,1,1,0,1,1,0,
				0,0,1,1,0,1,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,0,1,1,
				1,1},
				{0,1,1,1,0,0,1,0,0,1,1,0,1,1,0,0,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,
				1,0,1,0,0,1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,0,1,1,0}};
		int[] expectedBloc2  = {0,1,0,0,1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,0,1,1,0,0,0,1,
				1,0,1,1,0,0,0,1,1,0,1,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,
				1,1,0,1,1,1,1,0,1,1,1,0,0,1,0,0,1,1,0,1,1,0,0,0,1,1,0,0,1,0,0,
				0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,0,1,1,0,};
		// WHEN we stick the blocs to get just one
		// THEN
		assertArrayEquals(expectedBloc2, des.recollageBloc(blocs2));
		
		// GIVEN a list of blocs with an empty bloc
		int[][] blocs3 = {
				{0,1,0,0,1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,0,1,1,0,0,0,1,1,0,1,1,0,
				0,0,1,1,0,1,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,0,1,1,
				1,1},
				{}};
		int[] expectedBloc3  = {0,1,0,0,1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,0,1,1,0,
				0,0,1,1,0,1,1,0,0,0,1,1,0,1,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,0,1,
				1,1,0,1,1,0,1,1,1,1};
		// WHEN we stick the blocs to get just one
		// THEN
		assertArrayEquals(expectedBloc3, des.recollageBloc(blocs3));
	}
	
	@Test
	void testXor() {
		// GIVEN two blocs
		int[] bloc1 = {0,1,0,1,1,0};
		int[] bloc2 = {0,1,0,1,0,1};
		int[] expectedBloc = {0,0,0,0,1,1};
		// WHEN we XOR the blocs
		// THEN
		assertArrayEquals(expectedBloc, des.xor(bloc1, bloc2));
		
		// GIVEN two long blocs
		int[] bloc12 = {0,1,1,1,0,0,1,0,0,1,1,0,1,1,0,0,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,0,1,1,0,0,0,1,1,0,1,1,0,0};
		int[] bloc22 = {0,1,1,0,1,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,0,0,1,0,0,1,1,0,1,1,0,0,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,1};
		int[] expectedBloc1 = {0,0,0,1,1,1,0,1,0,1,0,0,1,1,0,0,0,0,0,1,0,0,1,1,0,1,0,0,1,1,1,0,0,0,1,1,1,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,1};
		// WHEN we XOR the blocs
		// THEN
		assertArrayEquals(expectedBloc1, des.xor(bloc12, bloc22));
		
		// GIVEN two blocs of different sizes
		int[] bloc13 = {0,1,0,1,1,0};
		int[] bloc23 = {0,1,0,1,0,1,1};
		// WHEN we XOR the blocs
		// THEN
		assertNull(des.xor(bloc13, bloc23));
	}
	
	@Test
	void testFonctionS() {
		// GIVEN blocs of 6 bits
		int[] bloc = {1,0,1,0,1,0,
					   1,0,1,0,1,1,
					   1,1,1,0,1,0,
					   0,0,1,0,1,0,
					   1,1,1,1,1,0,
					   1,0,0,0,1,0,
					   1,0,0,1,1,0,
					   1,0,0,1,0,1};
		int[] expectedResult = {0,1,1,0,1,0,0,1,1,0,1,0,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0};
		// WHEN we applied the S function about it
		// THEN
		assertArrayEquals(expectedResult, des.fonctionS(bloc,0));
	}
	
	@Test
	void testCrypteDecrypte() {
		// GIVEN a plain text
		String message = "Hello world!";
		// WHEN the text is encrypted and deciphered
		int [] decipherMessage = des.decrypte(des.crypte(des.stringToBits(message)));
		// THEN the result is equals to the original text
		assertEquals(message, des.bitsToString(decipherMessage));
		
		// GIVEN a big plain text
		message = "Je ne suis pas, Messieurs, de ceux qui croient quâ€™on peut supprimer la souffrance en ce monde ; la souffrance est une loi divine ; mais je suis de ceux qui pensent et qui affirment quâ€™on peut dÃ©truire la misÃ¨re. (Mouvements divers.)\r\n"
				+ "\r\n"
				+ "Remarquez-le bien, Messieurs, je ne dis pas diminuer, amoindrir, limiter, circonscrire, je dis dÃ©truire. (Nouveaux murmures Ã  droite.) La misÃ¨re est une maladie du corps social comme la lÃ¨pre Ã©tait une maladie du corps humainâ€¯; la misÃ¨re peut disparaÃ®tre comme la lÃ¨pre a disparu (Oui ! oui ! Ã  gauche). DÃ©truire la misÃ¨re ! Oui, cela est possible. (Mouvement. â€” Quelques voix : Comment ? Comment ?) Les lÃ©gislateurs et les gouvernants doivent y songer sans cesse ; car, en pareille matiÃ¨re, tant que le possible nâ€™est pas fait, le devoir nâ€™est pas rempli. (TrÃ¨s bien ! trÃ¨s bien !)\r\n"
				+ "\r\n"
				+ "La misÃ¨re, Messieurs, jâ€™aborde ici le vif de la question, voulez-vous savoir oÃ¹ elle en est, la misÃ¨re ? Voulez-vous savoir jusquâ€™oÃ¹ elle peut aller, jusquâ€™oÃ¹ elle va, je ne dis pas en Irlande, je ne dis pas au moyen-Ã¢ge, je dis en France, je dis Ã  Paris, et au temps oÃ¹ nous vivons ? Voulez-vous des faits ?\r\n"
				+ "\r\n"
				+ "Il y a dans Parisâ€¦ (Lâ€™orateur sâ€™interrompt.)\r\n"
				+ "\r\n"
				+ "Mon Dieu, je nâ€™hÃ©site pas Ã  les citer, ces faits. Ils sont tristes, mais nÃ©cessaires Ã  rÃ©vÃ©ler ; et tenez, sâ€™il faut dire toute ma pensÃ©e, je voudrais quâ€™il sortÃ®t de cette AssemblÃ©e, et au besoin jâ€™en ferai la proposition formelle, une grande et solennelle enquÃªte sur la situation vraie des classes laborieuses et souffrantes en France. (TrÃ¨s bien !) Je voudrais que tous les faits Ã©clatassent au grand jour. Comment veut-on guÃ©rir le mal si lâ€™on ne sonde pas les plaies ? (TrÃ¨s bien ! trÃ¨s bien !)\r\n"
				+ "\r\n"
				+ "Voici donc ces faits.\r\n"
				+ "\r\n"
				+ "Il y a dans Paris, dans ces faubourgs de Paris que le vent de lâ€™Ã©meute soulevait naguÃ¨re si aisÃ©ment, il y a des rues, des maisons, des cloaques, oÃ¹ des familles, des familles entiÃ¨res, vivent pÃªle-mÃªle, hommes, femmes, jeunes filles, enfants, nâ€™ayant pour lits, nâ€™ayant pour couvertures, jâ€™ai presque dit pour vÃªtements, que des monceaux infects de chiffons en fermentation, ramassÃ©s dans la fange du coin des bornes, espÃ¨ce de fumier des villes, oÃ¹ des crÃ©atures sâ€™enfouissent toutes vivantes pour Ã©chapper au froid de lâ€™hiver. (Mouvement.)\r\n"
				+ "\r\n"
				+ "VoilÃ  un fait. En voulez-vous dâ€™autres ? Ces jours-ci, un homme, mon Dieu, un malheureux homme de lettres, car la misÃ¨re nâ€™Ã©pargne pas plus les professions libÃ©rales que les professions manuelles, un malheureux homme est mort de faim, mort de faim Ã  la lettre, et lâ€™on a constatÃ©, aprÃ¨s sa mort, quâ€™il nâ€™avait pas mangÃ© depuis six jours. (Longue interruption.) Voulez-vous quelque chose de plus douloureux encore ? Le mois passÃ©, pendant la recrudescence du cholÃ©ra, on a trouvÃ© une mÃ¨re et ses quatre enfants qui cherchaient leur nourriture dans les dÃ©bris immondes et pestilentiels des charniers de Montfaucon ! (Sensation.)\r\n"
				+ "\r\n"
				+ "Eh bien, messieurs, je dis que ce sont lÃ  des choses qui ne doivent pas Ãªtre ; je dis que la sociÃ©tÃ© doit dÃ©penser toute sa force, toute sa sollicitude, toute son intelligence, toute sa volontÃ©, pour que de telles choses ne soient pas ! Je dis que de tels faits, dans un pays civilisÃ©, engagent la conscience de la sociÃ©tÃ© tout entiÃ¨re ; que je mâ€™en sens, moi qui parle, complice et solidaire (mouvement), et que de tels faits ne sont pas seulement des torts envers lâ€™homme, que ce sont des crimes envers Dieu ! (Sensation prolongÃ©e.)\r\n"
				+ "\r\n"
				+ "VoilÃ  pourquoi je suis pÃ©nÃ©trÃ©, voilÃ  pourquoi je voudrais pÃ©nÃ©trer tous ceux qui mâ€™Ã©coutent de la haute importance de la proposition qui vous est soumise. Ce nâ€™est quâ€™un premier pas, mais il est dÃ©cisif. Je voudrais que cette AssemblÃ©e, majoritÃ© et minoritÃ©, nâ€™importe, je ne connais pas, moi de majoritÃ© et de minoritÃ© en de telles questions ; je voudrais que cette AssemblÃ©e nâ€™eÃ»t quâ€™une seule Ã¢me pour marcher Ã  ce grand but, Ã  ce but magnifique, Ã  ce but sublime, lâ€™abolition de la misÃ¨re ! (Bravo ! â€” Applaudissements.)\r\n"
				+ "\r\n"
				+ "Et, messieurs, je ne mâ€™adresse pas seulement Ã  votre gÃ©nÃ©rositÃ©, je mâ€™adresse Ã  ce quâ€™il y a de plus sÃ©rieux dans le sentiment politique dâ€™une assemblÃ©e de lÃ©gislateurs. Et, Ã  ce sujet, un dernier mot : je terminerai par lÃ .\r\n"
				+ "\r\n"
				+ "Messieurs, comme je vous le disais tout Ã  lâ€™heure, vous venez, avec le concours de la garde nationale, de lâ€™armÃ©e et de toutes les forces vives du pays, vous venez de raffermir lâ€™Ã‰tat Ã©branlÃ© encore une fois. Vous nâ€™avez reculÃ© devant aucun pÃ©ril, vous nâ€™avez hÃ©sitÃ© devant aucun devoir. Vous avez sauvÃ© la sociÃ©tÃ© rÃ©guliÃ¨re, le gouvernement lÃ©gal, les institutions, la paix publique, la civilisation mÃªme. Vous avez fait une chose considÃ©rableâ€¦ Eh bien ! Vous nâ€™avez rien fait ! (Mouvement.)\r\n"
				+ "\r\n"
				+ "Vous nâ€™avez rien fait, jâ€™insiste sur ce point, tant que lâ€™ordre matÃ©riel raffermi nâ€™a point pour base lâ€™ordre moral consolidÃ© ! (TrÃ¨s bien ! trÃ¨s bien ! â€” Vive et unanime adhÃ©sion.) Vous nâ€™avez rien fait tant que le peuple souffre ! (Bravos Ã  gauche.) Vous nâ€™avez rien fait tant quâ€™il y a au-dessous de vous une partie du peuple qui dÃ©sespÃ¨re ! Vous nâ€™avez rien fait, tant que ceux qui sont dans la force de lâ€™Ã¢ge et qui travaillent peuvent Ãªtre sans pain ! tant que ceux qui sont vieux et qui ne peuvent plus travailler sont sans asile ! tant que lâ€™usure dÃ©vore nos campagnes, tant quâ€™on meurt de faim dans nos villes (mouvement prolongÃ©), tant quâ€™il nâ€™y a pas des lois fraternelles, des lois Ã©vangÃ©liques qui viennent de toutes parts en aide aux pauvres familles honnÃªtes, aux bons paysans, aux bons ouvriers, aux gens de cÅ“ur ! (Acclamation.) Vous nâ€™avez rien fait, tant que lâ€™esprit de rÃ©volution a pour auxiliaire la souffrance publique ! Vous nâ€™avez rien fait, rien fait, tant que, dans cette Å“uvre de destruction et de tÃ©nÃ¨bres, qui se continue souterrainement, lâ€™homme mÃ©chant a pour collaborateur fatal lâ€™homme malheureux !\r\n"
				+ "\r\n"
				+ "Vous le voyez, messieurs, je le rÃ©pÃ¨te en terminant, ce nâ€™est pas seulement Ã  votre gÃ©nÃ©rositÃ© que je mâ€™adresse, câ€™est Ã  votre sagesse, et je vous conjure dâ€™y rÃ©flÃ©chir. Messieurs, songez-y, câ€™est lâ€™anarchie qui ouvre les abÃ®mes, mais câ€™est la misÃ¨re qui les creuse. (Câ€™est vrai ! câ€™est vrai !) Vous avez fait des lois contre lâ€™anarchie, faites maintenant des lois contre la misÃ¨re ! (Mouvement prolongÃ© sur tous les bancs. â€” Lâ€™orateur descend de la tribune et reÃ§oit les fÃ©licitations de ses collÃ¨gues.)";
		// WHEN the text is encrypted and deciphered
		decipherMessage = des.decrypte(des.crypte(des.stringToBits(message)));
		// THEN the result is equals to the original text
		assertEquals(message, des.bitsToString(decipherMessage));
		
		// GIVEN an empty plain text
		message = "";
		// WHEN the text is encrypted and deciphered
		decipherMessage = des.decrypte(des.crypte(des.stringToBits(message)));
		// THEN the result is equals to the original text
		assertEquals(message, des.bitsToString(decipherMessage));
	}
}
